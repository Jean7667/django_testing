#for signals links the user profile with the built-in user
from django.db.models.signals import post_save
from django.dispatch import receiver

#signals practice check test sync with user 
class Type_of_Business (models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return f"Type of business: {self.name}"

class User_Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, null=True, blank=True)
    first_name = models.CharField(max_length=100, blank=False)
    last_name = models.CharField(max_length=150, blank=False)
        #username = models.CharField(max_length=150, unique=True, blank=False)
    email = models.EmailField(max_length=150, blank=False)
    location = models.CharField(max_length=150, blank=False)
    website = models.URLField(max_length=200, blank=True)
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)
    is_active = models.BooleanField(default=True)
    company_name = models.CharField(max_length=200, blank=True)
    is_a_business = models.BooleanField(default=False)
    business = models.ForeignKey(Type_of_Business, on_delete=models.SET_NULL, null=True, blank=True)
    
    def __str__(self):
        return f"last name: {self.last_name}"
    
    #Signals 
    
# @receiver(post_save, sender=User)

""" def update_user_profile(sender, instance, created, **kwargs):
    if not created:
        print('Profile updated!') """

@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        User_Profile.objects.create(user=instance)

